-- Load the data
c = LOAD("https://raw.githubusercontent.com/acannistra/myria_similarity/master/data/cora/cora.txt",
            csv(schema(unknown:string,
                   pubid:string,
                       author:string,
                       volume:string,
                       title:string,
                       institute:string,
                       venue:string,
                       address:string,
                       pub:string,
                       yr:string, -- "year" is a reserved keyword
                       pages:string,
                       editor:string,
                       note:string,
                       mnth:string, -- "month" is a reserved keyword
                       emptycol:string),
                skip=0, delimiter="\t"));

-- Assign sequential ids
-- Goal: add an integer id to each record. we assume they are unique despite some having the same pubid

APPLY counter() {
-- function from MyriaL language docs
-- WARNING: every partition creates its 
-- own state (i.e. restarts the count) 
  [0 AS c];
  [c + 1];
  c;
};
Cora = [FROM c EMIT counter() as recordid, pubid, author, volume, title, institute, venue, address, pub, yr, pages, editor, note, mnth];
STORE (Cora, Cora);

--------

-- Compute ngrams with n=5
-- Goal: for each record, get ngrams for each field and add them to the table of (recordid, ngram) pairs
Data = scan(Cora);

RelationNgrams = SELECT recordid, ngram(Data.title, 5) as ng FROM Data;
store(RelationNgrams, RelationNgrams);

-- Compute the unique set of ngrams
-- Goal: rather than compute all possible ngrams, just store/use the ones present in the data
ObservedNgrams = SELECT DISTINCT r.ng from RelationNgrams as r;
store(ObservedNgrams, ObservedNgrams);

-- Generate a set of hash functions by defining the coefficients
-- Goal: generate random integer coefficients for a predetermined number of hash functions
MinHashCoefs = load("http://homes.cs.washington.edu/~kdorosch/hash_fns_84.txt", csv(schema(hashFnNo:int, a:int, b:int),
                skip=0, delimiter="\t"));
STORE(MinHashCoefs, MinHashCoefs);

-- Define the udf for computing a given minhash based on coeffs
def hash(x, a, b): a*x + b;

-- Compute the hash values for all ngrams for all hash functions
-- Goal: each hash function is computed for each ngram with the result stored here.
NgramHashFnMap = [from RelationNgrams r, MinHashCoefs h emit r.ng, r.recordid, h.hashFnNo];
HashesOfNgrams = select n.ng, n.hashFnNo, hash(n.recordid, m.a, m.b) as hashVal
                 from NgramHashFnMap n, MinHashCoefs m
                 where n.hashFnNo = m.hashFnNo;

-- Join the hash computation with the records
-- Goal: each (record, ngram) pair gets matched with its associated hashFnNo and hashVal 
HashesByRecord = SELECT r.recordid, h.ng, h.hashFnNo, h.hashVal 
                 FROM RelationNgrams r, HashesOfNgrams h
                 WHERE r.ng = h.ng;
--STORE(h, HashesByRecord, [recordid]);
--HashesByRecord = SCAN(HashesByRecord);

-- Compute the MinHash signature matrix.
-- Goal: find the minimum value produced by any hash for a given ngram of a given record.
--       In other words, find (recordid, hashFnNo) pairs with the lowest hashVal
SignatureMatrix = [from HashesByRecord 
                   emit recordid, hashFnNo, min(hashVal) as minHashVal];
-- TODO: Make sure minHashVal is producing correct output
STORE(SignatureMatrix, SignatureMatrix);

-- Compute the LSH matrix 
-- Goal: partition the signature matrix into m groups of k hash functions (l=84, m=16, k=4)

-- TODO: create map from hashfnno -> band
def mod(x, n): x - int(x/n)*n;
--bandMap = empty(hashFnNo:int, bandNo:int);


-- Add band numbers
-- Goal: Compute which band each hash function belongs to by taking the mod of the hashFnNo
--LSHMatrix = empty(recordid:int, bandNo:int, hashFnNo:int, minHashVal:int);
-- TODO: REMOVE LITERAL 16
m = [16];
BandedSigMatrix = select sm.recordid, mod(sm.hashFnNo, *m) as bandNo, sm.hashFnNo, sm.minHashVal 
                  from SignatureMatrix sm;

STORE(BandedSigMatrix, BandedSigMatrix);

def lsh(x):
  mod(x, 1000);

-- TODO: what's up  with mod (fix it)
LSH_temp = [from BandedSigMatrix bsm emit bsm.recordid, bsm.bandNo, sum(bsm.minHashVal) as lsh];

LSHMatrix = select bsm.recordid, bsm.bandNo, bsm.hashFnNo, bsm.minHashVal, lsht.lsh from LSH_temp lsht, BandedSigMatrix bsm where bsm.recordid=lsht.recordid and bsm.bandNo = lsht.bandNo;

store(LSHMatrix, LSHMatrix);

-- wrong
groups = select lsma.recordid, lsmb.recordid, count(*) from LSHMatrix lsma, LSHMatrix lsmb where lsma.lsh=lsmb.lsh and lsma.hashFnNo = lsmb.hashFnNo and lsma.minHashVal=lsmb.minHashVal;

store(groups, groups);

